swagger: '2.0'
info:
  version: 1.0.0
  title: TODO App
host: localhost:3000
basePath: /api
schemes:
  - http
  - https
tags:
  - name: auth
    description: authentication apis
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
definitions:
  SignUp:
    type: object
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        minLength: 8
    required:
      - email
      - password
  SignIn:
    type: object
    properties:
      email:
        type: string
        format: email
      password:
        type: string
    required:
      - email
      - password
  LoginResponse:
    type: object
    properties:
      success:
        type: boolean
      data:
        type: object
        properties:
          accessToken:
            type: string
          refreshToken:
            type: string
  Error:
    type: object
    properties:
      success:
        type: boolean
      error:
        type: string
    example:
      success: false
      error: error message
  AccessTokenResponse:
    type: object
    properties:
      success:
        type: boolean
      data:
        type: object
        properties:
          accessToken:
            type: string
  Success:
    type: object
    properties:
      success:
        type: boolean
      data:
        type: object
        properties:
          message:
            type: string
    example:
      success: true
      data:
        message: success message
  PasswordReset:
    type: object
    properties:
      token:
        type: string
      password:
        type: string
        minLength: 8
    required:
      - token
      - password
  Task:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
      description:
        type: string
      due_at:
        type: string
      is_completed:
        type: integer
      user_id:
        type: integer
      completed_at:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  TaskDetail:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
      description:
        type: string
      due_at:
        type: string
      is_completed:
        type: integer
      user_id:
        type: integer
      completed_at:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
      task_attachments:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            attachment_url:
              type: string
            attachment_type:
              type: string
            task_id:
              type: integer
            createdAt:
              type: string
            updatedAt:
              type: string
  UpdateTask:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      due_at:
        type: string
    required:
      - title
      - description
      - due_at
parameters:
  limitParam:
    in: query
    name: limit
    required: false
    type: integer
    minimum: 1
    maximum: 50
    default: 20
    description: The numbers of items to return.
  offsetParam:
    in: query
    name: offset
    required: false
    type: integer
    minimum: 0
    default: 0
    description: The number of items to skip before starting to collect the result set.
  searchParam:
    in: query
    name: text
    required: false
    type: string
    description: The search field to filter the results.
  orderParam:
    in: query
    name: order
    required: false
    type: string
    enum:
      - asc
      - desc
    default: desc
    description: The order of items to return.
  idParam:
    in: path
    name: id
    type: integer
    required: true
    description: Id of an entity.
paths:
  /auth/signup:
    post:
      summary: user register
      tags:
        - auth
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            $ref: '#/definitions/SignUp'
      responses:
        '201':
          description: Register success
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
  /auth/verify_account:
    post:
      summary: user account verification
      tags:
        - auth
      parameters:
        - in: body
          name: token
          description: Account verification token.
          schema:
            type: object
            properties:
              token:
                type: string
      responses:
        '200':
          description: Account verified successfully
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
  /auth/signin:
    post:
      summary: user signin
      tags:
        - auth
      parameters:
        - in: body
          name: user
          description: The user to signin.
          schema:
            $ref: '#/definitions/SignIn'
      responses:
        '200':
          description: Login success
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
  /auth/generate_access_token:
    post:
      summary: generate access token using refresh token
      tags:
        - auth
      parameters:
        - in: body
          name: refreshToken
          description: refresh token
          schema:
            type: object
            properties:
              refreshToken:
                type: string
            required:
              - refreshToken
      responses:
        '200':
          description: Access token generated success
          schema:
            $ref: '#/definitions/AccessTokenResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
  /auth/forgot_password/{email}:
    patch:
      summary: forgot password api
      tags:
        - auth
      parameters:
        - in: path
          name: email
          type: string
          description: user email
          required: true
      responses:
        '200':
          description: password reset email sent successfully
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
  /auth/reset_password:
    post:
      summary: password reset api
      tags:
        - auth
      parameters:
        - in: body
          name: PasswordReset
          description: password reset token and new password
          schema:
            $ref: '#/definitions/PasswordReset'
      responses:
        '200':
          description: Password reset successfully
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
  /auth/social_login:
    post:
      summary: user social login
      tags:
        - auth
      parameters:
        - in: body
          name: idToken
          description: idToken from firebase after social login.
          schema:
            type: object
            properties:
              idToken:
                type: string
      responses:
        '200':
          description: Login success
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
  /tasks:
    post:
      summary: create new task
      tags:
        - task
      security:
        - bearerAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: title
          type: string
          maxLength: 100
          required: true
        - in: formData
          name: description
          type: string
          maxLength: 255
          required: true
        - in: formData
          name: due_at
          type: string
          required: true
        - in: formData
          name: attachments
          type: array
          items:
            type: string
            format: binary
          description: Task attachments/array of files.
          required: false
      responses:
        '200':
          description: Task Created
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: get task paginated listing
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
        - $ref: '#/parameters/searchParam'
        - $ref: '#/parameters/orderParam'
      responses:
        '200':
          description: listing of tasks
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  count:
                    type: integer
                  rows:
                    type: array
                    items:
                      $ref: '#/definitions/Task'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
  /tasks/{id}:
    get:
      summary: get task details
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/parameters/idParam'
      responses:
        '200':
          description: task detail
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/definitions/TaskDetail'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete task
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/parameters/idParam'
      responses:
        '200':
          description: task deleted
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: update task
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/parameters/idParam'
        - in: body
          name: updateTask
          description: update task payload.
          schema:
            $ref: '#/definitions/UpdateTask'
      responses:
        '200':
          description: Task Updated
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
  /tasks/{id}/completed:
    patch:
      summary: mark task as completed
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/parameters/idParam'
      responses:
        '200':
          description: task updated
          schema:
            $ref: '#definitions/Success'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
  /tasks/{id}/similar_tasks:
    get:
      summary: 'get similar tasks '
      tags:
        - task
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/parameters/idParam'
      responses:
        '200':
          description: similar task listings
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: '#/definitions/Task'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: unauthorized request
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
